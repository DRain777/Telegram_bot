�������! ������� ��� ���, �������:  
**? SQLite ��� �������� ������**  
**? �������� �������� �� ������/�����**  
**? ���������� � CryptoPay ��� ������ �������� � USDT**  

---

### **?? ���������� ������ ����**  
```python
import telebot
from telebot import types
from datetime import datetime
import sqlite3
import requests

bot = telebot.TeleBot("YOUR_BOT_TOKEN")
CHAT_ID = -1001234567890  # ID ����� ������/������
CRYPTO_PAY_API = "https://pay.crypt.bot/api"  # API CryptoPay

# ������������� ��
def init_db():
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            join_date TEXT,
            paid BOOLEAN DEFAULT FALSE
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# �������� ��������
def is_member(user_id):
    try:
        status = bot.get_chat_member(CHAT_ID, user_id).status
        return status in ['member', 'administrator', 'creator']
    except:
        return False

# ��������� ������ �� ������ ����� CryptoPay
def generate_crypto_pay_link(amount: float, currency: str = "USDT"):
    headers = {"Crypto-Pay-API-Token": "YOUR_CRYPTO_PAY_TOKEN"}
    params = {
        "amount": amount,
        "currency": currency,
        "description": "������ ��������"
    }
    response = requests.post(f"{CRYPTO_PAY_API}/createInvoice", headers=headers, json=params)
    return response.json().get("result", {}).get("pay_url")

# ������� /start
@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    # ��������� ������������ � ��, ���� ��� ���
    cursor.execute("INSERT OR IGNORE INTO users (user_id, join_date) VALUES (?, ?)", 
                   (user_id, datetime.now().isoformat()))
    conn.commit()
    conn.close()
    
    show_main_menu(message.chat.id)

# ������� ����
def show_main_menu(chat_id):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("?? ������", callback_data="pay"),
        types.InlineKeyboardButton("?? ����������", callback_data="stats")
    )
    markup.row(types.InlineKeyboardButton("?? ����", url="https://coinmarcetcap.com"))
    
    bot.send_message(chat_id, "?? �������� ��������:", reply_markup=markup)

# ��������� callback-��������
@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call):
    user_id = call.from_user.id
    
    if call.data == "pay":
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("?? USDT (CryptoPay)", url=generate_crypto_pay_link(10)),
            types.InlineKeyboardButton("?? �����", callback_data="back")
        )
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="?? ������ 10 USDT ����� CryptoPay:",
            reply_markup=markup
        )
        
    elif call.data == "stats":
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        cursor.execute("SELECT join_date FROM users WHERE user_id=?", (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        if result:
            days_in_group = (datetime.now() - datetime.fromisoformat(result[0])).days
            sub_status = "? ��������" if is_member(user_id) else "? �� ��������"
            bot.answer_callback_query(
                call.id,
                f"{sub_status}\n� ������: {days_in_group} ����",
                show_alert=True
            )
    
    elif call.data == "back":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        show_main_menu(call.message.chat.id)

# �������� �������� (��������� � ��������� ������)
def check_payments():
    while True:
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        # ����� ������ ���� ������ �������� ������ ����� CryptoPay API
        # ��������� ������ paid=TRUE ��� ����������
        conn.commit()
        conn.close()
        time.sleep(60)

bot.polling(none_stop=True)
```

---

### **?? ��� ���� ��������?**  
1. **���� ������ SQLite**  
   - �������� �������������, ���� ���������� � ������� ������.  
   - ������ �������: `SELECT join_date FROM users WHERE user_id=?`  

2. **�������� ��������**  
   - ������� `is_member()` ���������, ������� �� ������������ � ����� ����.  

3. **���������� � CryptoPay**  
   - �������������� ��������� ������ �� ������ � USDT.  
   - ��� ������ ����� API-���� �� [CryptoPay](https://help.crypt.bot/en/articles/).  

4. **������������**  
   - ��� callback-������ �������������� ���������.  
   - ��� �������� ��������� ������ � ����.  

---

### **?? ��� ���������?**  
1. ���������� �����������:  
   ```bash
   pip install pyTelegramBotAPI requests sqlite3
   ```
2. �������� `YOUR_BOT_TOKEN` � `YOUR_CRYPTO_PAY_TOKEN` �� �������� �����.  
3. ��� �������� �������� �������� **Cron-������** ��� **Webhook**.  

������ �������� ������ ��������� ������� (�Kassa, Binance Pay)? ??
































��� ����������� ��� � �������� �������� �� ����� ����� ������:

```python
import telebot
from telebot import types
from datetime import datetime

bot = telebot.TeleBot("7636140010:AAHS4Ko-wd5fpspkQOQn50z-NkFdWuJpJbk")

# ������������
CHANNEL_ID = "@���_�����"  # �������� �� username ��� ID ������ ������
ADMIN_ID = 123456789  # ��� ID ��� �����������

# ��������� ������ (� �������� ������� ����������� ��)
user_data = {}
payments = {}

@bot.message_handler(commands=["start"])
def main(message):
    user_id = message.from_user.id
    user_data[user_id] = {"joined_date": datetime.now()}
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("?? ������", callback_data="pay"),
        types.InlineKeyboardButton("?? ����� � ������", callback_data="old"),
        types.InlineKeyboardButton("?? ����", url="https://coinmarcetcap.com"),
    )
    
    bot.send_message(
        message.chat.id, 
        "������! � ��� ���-��������. �������� ��������:", 
        reply_markup=markup
    )

def handle_payment_options(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("?? ������������ (USDT)", callback_data="pay_crypto"),
        types.InlineKeyboardButton("?? ���������� �����", callback_data="pay_card"),
        types.InlineKeyboardButton("?? �����", callback_data="back_to_main"),
    )
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="�������� ������ ������:",
        reply_markup=markup
    )

def handle_group_time(call):
    user_id = call.from_user.id
    if user_id in user_data:
        days_in_group = (datetime.now() - user_data[user_id]["joined_date"]).days
        bot.answer_callback_query(
            call.id,
            f"�� � ������ ��� {days_in_group} ����!",
            show_alert=True
        )
    else:
        bot.answer_callback_query(
            call.id,
            "�� �� � ������. ��������, ����� ����������� �����!",
            show_alert=True
        )

def check_subscription(user_id):
    try:
        member = bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False

def process_payment(user_id, payment_method):
    payments[user_id] = {
        "method": payment_method,
        "timestamp": datetime.now(),
        "completed": True
    }
    
    # ��������� �������� � ���������� �����������
    if check_subscription(user_id):
        bot.send_message(
            user_id,
            "? ������ ������ �������! �� ��� ��������� �� ��� �����."
        )
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("����������� �� �����", url=f"https://t.me/{CHANNEL_ID[1:]}"))
        
        bot.send_message(
            user_id,
            f"? ������ ������ �������! ����������� �� ��� ����� {CHANNEL_ID} ��� ��������� ��������:",
            reply_markup=markup
        )
    
    # ����������� ��������������
    bot.send_message(
        ADMIN_ID,
        f"?? ����� ������ �� ������������ {user_id}\n"
        f"�����: {payment_method}\n"
        f"�����: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    user_id = call.from_user.id
    
    if call.data == "pay":
        handle_payment_options(call)
    elif call.data == "old":
        handle_group_time(call)
    elif call.data == "pay_crypto":
        process_payment(user_id, "������������ (USDT)")
        bot.answer_callback_query(call.id, "��������� ��� ������ USDT: TABC123...")
    elif call.data == "pay_card":
        process_payment(user_id, "���������� �����")
        bot.answer_callback_query(call.id, "��������� �����: 1234 5678 9012 3456")
    elif call.data == "back_to_main":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        main(call.message)

# �������� �������� ��� ������� /check
@bot.message_handler(commands=["check"])
def check_subscription_cmd(message):
    if check_subscription(message.from_user.id):
        bot.reply_to(message, "? �� ��������� �� ��� �����!")
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("�����������", url=f"https://t.me/{CHANNEL_ID[1:]}"))
        bot.reply_to(
            message,
            "? �� �� ��������� �� ��� �����. ����������, �����������:",
            reply_markup=markup
        )

bot.polling(none_stop=True)
```

### �������� ���������:

1. **������� �������� �� �����**:
   - ��������� ������� `check_subscription()` ��� �������� �������� ������������
   - ����� ������ ������������ �������� ������ ��� �������� �� �����
   - ������������� �������� ����������� � ����� ������

2. **��������� ��������**:
   - ������� ������� `process_payment()`, �������:
     - ���������� ���� ������
     - ��������� �������� �� �����
     - ���������� ��������������� ��������� ������������
     - ���������� ��������������

3. **������� �������� ��������**:
   - ��������� ������� `/check` ��� ������ �������� ��������

4. **������������**:
   - ��������� ���������� `CHANNEL_ID` � `ADMIN_ID` ��� ������� ���������

### ��� ������������:

1. �������� `@���_�����` �� username ������ ������ (��������, `@my_channel`)
2. ������� ��� Telegram ID � `ADMIN_ID`
3. ��������� ��������� ��� ������ � ������������ `pay_crypto` � `pay_card`
4. ��� ������������� �������� ���������� � ���������� ���������

### �����:

��� �������� �������� ��� ������ ���� ��������������� � ����� ������. ����� ������, ��� � ������� ���������� ������ �������� � ������ � ����� �������� ��� ����������� ���� - ��� ��������� ������� ������� ������������ ���� ������.












Вот полностью прокомментированная версия кода с подробными объяснениями каждого блока:

```python
import telebot
from telebot import types
from datetime import datetime

# Инициализация бота с уникальным токеном, полученным от @BotFather
bot = telebot.TeleBot("7636140010:AAHS4Ko-wd5fpspkQOQn50z-NkFdWuJpJbk")

# Конфигурационные константы
CHANNEL_ID = "@ваш_канал"  # Укажите username или ID вашего канала (например "@my_channel")
ADMIN_ID = 123456789  # Ваш Telegram ID для получения уведомлений (можно узнать у @userinfobot)

# Временное хранилище данных (в реальном проекте следует использовать базу данных)
user_data = {}  # Хранит информацию о пользователях: {user_id: {"joined_date": datetime}}
payments = {}   # Хранит информацию о платежах: {user_id: payment_data}

# Обработчик команды /start - главное меню бота
@bot.message_handler(commands=["start"])
def main(message):
    """
    Обрабатывает команду /start - точку входа для пользователей
    Создает запись о пользователе и показывает главное меню с кнопками
    """
    user_id = message.from_user.id
    
    # Сохраняем дату первого взаимодействия с ботом
    user_data[user_id] = {"joined_date": datetime.now()}
    
    # Создаем клавиатуру с основными кнопками
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("💳 Оплата", callback_data="pay"),
        types.InlineKeyboardButton("📅 Время в группе", callback_data="old"),
        types.InlineKeyboardButton("🌐 Сайт", url="https://coinmarcetcap.com"),
    )
    
    # Отправляем приветственное сообщение с кнопками
    bot.send_message(
        message.chat.id, 
        "Привет! Я ваш бот-помощник. Выберите действие:", 
        reply_markup=markup
    )

def handle_payment_options(call):
    """
    Обрабатывает нажатие кнопки "Оплата"
    Показывает меню с выбором способа оплаты
    """
    # Создаем клавиатуру с вариантами оплаты
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("💰 Криптовалюта (USDT)", callback_data="pay_crypto"),
        types.InlineKeyboardButton("💳 Банковская карта", callback_data="pay_card"),
        types.InlineKeyboardButton("🔙 Назад", callback_data="back_to_main"),
    )
    
    # Редактируем текущее сообщение, заменяя его меню оплаты
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="Выберите способ оплаты:",
        reply_markup=markup
    )

def handle_group_time(call):
    """
    Обрабатывает нажатие кнопки "Время в группе"
    Показывает сколько дней пользователь взаимодействует с ботом
    """
    user_id = call.from_user.id
    
    # Проверяем, есть ли пользователь в нашей системе
    if user_id in user_data:
        # Вычисляем количество дней с момента первого взаимодействия
        days_in_group = (datetime.now() - user_data[user_id]["joined_date"]).days
        
        # Показываем всплывающее уведомление с результатом
        bot.answer_callback_query(
            call.id,
            f"Вы в группе уже {days_in_group} дней!",
            show_alert=True
        )
    else:
        # Если пользователь не найден (маловероятно, но возможно)
        bot.answer_callback_query(
            call.id,
            "Вы не в группе. Вступите, чтобы отслеживать время!",
            show_alert=True
        )

def check_subscription(user_id):
    """
    Проверяет, подписан ли пользователь на указанный канал
    Возвращает True если подписан, False если нет
    """
    try:
        # Получаем информацию о статусе пользователя в канале
        member = bot.get_chat_member(CHANNEL_ID, user_id)
        # Проверяем, что статус соответствует подписчику/администратору/создателю
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        # В случае ошибки (например, бот не админ в канале) возвращаем False
        print(f"Ошибка проверки подписки: {e}")
        return False

def process_payment(user_id, payment_method):
    """
    Обрабатывает успешную оплату:
    1. Сохраняет информацию о платеже
    2. Проверяет подписку на канал
    3. Отправляет соответствующие сообщения
    4. Уведомляет администратора
    """
    # Записываем информацию о платеже
    payments[user_id] = {
        "method": payment_method,
        "timestamp": datetime.now(),
        "completed": True
    }
    
    # Проверяем подписку на канал
    if check_subscription(user_id):
        # Если уже подписан - просто подтверждаем оплату
        bot.send_message(
            user_id,
            "✅ Оплата прошла успешно! Вы уже подписаны на наш канал."
        )
    else:
        # Если не подписан - предлагаем подписаться
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("Подписаться на канал", url=f"https://t.me/{CHANNEL_ID[1:]}"))
        
        bot.send_message(
            user_id,
            f"✅ Оплата прошла успешно! Подпишитесь на наш канал {CHANNEL_ID} для получения контента:",
            reply_markup=markup
        )
    
    # Отправляем уведомление администратору
    bot.send_message(
        ADMIN_ID,
        f"💰 Новая оплата от пользователя {user_id}\n"
        f"Метод: {payment_method}\n"
        f"Время: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )

# Главный обработчик нажатий на inline-кнопки
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    """
    Центральный обработчик всех callback-запросов от inline-кнопок
    Перенаправляет вызовы соответствующим функциям
    """
    user_id = call.from_user.id
    
    # Определяем какая кнопка была нажата и вызываем соответствующий обработчик
    if call.data == "pay":
        handle_payment_options(call)
    elif call.data == "old":
        handle_group_time(call)
    elif call.data == "pay_crypto":
        # Обработка оплаты криптовалютой
        process_payment(user_id, "Криптовалюта (USDT)")
        bot.answer_callback_query(call.id, "Реквизиты для оплаты USDT: TABC123...")
    elif call.data == "pay_card":
        # Обработка оплаты картой
        process_payment(user_id, "Банковская карта")
        bot.answer_callback_query(call.id, "Реквизиты карты: 1234 5678 9012 3456")
    elif call.data == "back_to_main":
        # Возврат в главное меню
        bot.delete_message(call.message.chat.id, call.message.message_id)
        main(call.message)

# Обработчик команды /check - проверка подписки на канал
@bot.message_handler(commands=["check"])
def check_subscription_cmd(message):
    """
    Обрабатывает команду /check - проверяет подписку пользователя на канал
    """
    if check_subscription(message.from_user.id):
        # Если подписан
        bot.reply_to(message, "✅ Вы подписаны на наш канал!")
    else:
        # Если не подписан - предлагаем подписаться
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("Подписаться", url=f"https://t.me/{CHANNEL_ID[1:]}"))
        bot.reply_to(
            message,
            "❌ Вы не подписаны на наш канал. Пожалуйста, подпишитесь:",
            reply_markup=markup
        )

# Запускаем бота в режиме непрерывного опроса серверов Telegram
bot.polling(none_stop=True)
```

### Ключевые моменты архитектуры:

1. **Структура данных**:
   - `user_data` - хранит информацию о пользователях
   - `payments` - записывает факты оплат
   - Константы `CHANNEL_ID` и `ADMIN_ID` для конфигурации

2. **Основные функции**:
   - `main()` - точка входа, главное меню
   - `handle_payment_options()` - меню выбора оплаты
   - `handle_group_time()` - расчет времени в "группе"
   - `check_subscription()` - проверка подписки на канал
   - `process_payment()` - обработка успешной оплаты

3. **Особенности реализации**:
   - Использование inline-кнопок для удобного интерфейса
   - Редактирование сообщений вместо создания новых
   - Два способа проверки подписки: автоматически после оплаты и по команде /check
   - Уведомления администратору о новых оплатах

4. **Безопасность**:
   - Для реального проекта следует добавить:
     - Проверку фактического поступления платежа
     - Шифрование чувствительных данных
     - Использование базы данных вместо словарей
     - Валидацию входящих данных

Этот код предоставляет полнофункциональную основу для бота с системой подписки через оплату, которую можно расширять по мере необходимости.